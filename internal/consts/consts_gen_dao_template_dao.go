package consts

const TemplateDaoDaoIndexContent = `
// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"fmt"

	consts "github.com/chaitin/veinmind-backend/consts/common"
	"github.com/chaitin/veinmind-backend/module/{ModuleName}/model/entity"
	"{TplImportPrefix}/internal"
	"github.com/chaitin/veinmind-backend/module/{ModuleName}/service/do"
	"github.com/chaitin/veinmind-backend/utility/cond/database"
	resource "github.com/chaitin/veinmind-backend/utility/resource/common"
	"github.com/chaitin/veinmind-backend/utility/snowflake"
)

// {TplTableNameCamelLowerCase}Dao is the data access object for table {TplTableName}.
// You can define custom methods on it to extend its functionality as you wish.
type {TplTableNameCamelLowerCase}Dao struct {
	*internal.{TplTableNameCamelCase}Dao
}

var (
	// {TplTableNameCamelCase} is globally public accessible object for table {TplTableName} operations.
	{TplTableNameCamelCase} = {TplTableNameCamelLowerCase}Dao{
		internal.New{TplTableNameCamelCase}Dao(),
	}
)

// Fill with you ideas below.

// 分布式 ID
var {TplTableNameCamelLowerCase}IDs *snowflake.ID

func (t *{TplTableNameCamelLowerCase}Dao) InitID(sID uint) {
	{TplTableNameCamelLowerCase}IDs = &snowflake.ID{SID: uint64(sID)}
}

// GetMaxID 生成主键id
func (t *{TplTableNameCamelLowerCase}Dao) GetMaxID(num uint64) (uint64, error) {
	if {TplTableNameCamelLowerCase}IDs == nil {
		return 0, consts.DisIDNil
	}

	return {TplTableNameCamelLowerCase}IDs.Get(num), nil
}

// 数据隔离
func (t *{TplTableNameCamelLowerCase}Dao) isolation(ctx context.Context, d *do.{TplTableNameCamelCase}) error {
	if d == nil {
		return consts.SearchDoNil
	}

	if d.OrgId == nil {
		orgID, err := resource.GetOrgID(ctx)
		if err != nil {
			return err
		}

		d.OrgId = orgID
	}

	return nil
}

// GetList 获取列表
func (t *{TplTableNameCamelLowerCase}Dao) GetList(ctx context.Context, es *[]entity.{TplTableNameCamelCase}, fields []interface{}, d *do.{TplTableNameCamelCase}, conds ...database.Cond) error {
	err := t.isolation(ctx, d)
	if err != nil {
		return err
	}

	return database.Get(t.{TplTableNameCamelCase}Dao.Ctx(ctx), es, fields, d, conds...)
}

// GetListByIDs 根据id批量获取
func (t *{TplTableNameCamelLowerCase}Dao) GetListByIDs(ctx context.Context, es *[]entity.{TplTableNameCamelCase}, fields []interface{}, ids []uint64, d *do.{TplTableNameCamelCase}, conds ...database.Cond) error {
	err := t.isolation(ctx, d)
	if err != nil {
		return err
	}

	if d.Id == nil {
		if len(ids) == 0 {
			return consts.IDsLenZero
		}

		d.Id = ids
	}

	return database.Get(t.{TplTableNameCamelCase}Dao.Ctx(ctx), es, fields, d, conds...)
}

// GetOne 获取单条记录
func (t *{TplTableNameCamelLowerCase}Dao) GetOne(ctx context.Context, e *entity.{TplTableNameCamelCase}, fields []interface{}, d *do.{TplTableNameCamelCase}, conds ...database.Cond) error {
	err := t.isolation(ctx, d)
	if err != nil {
		return err
	}

	return database.Get(t.{TplTableNameCamelCase}Dao.Ctx(ctx), e, fields, d, conds...)
}

func (t *{TplTableNameCamelLowerCase}Dao) FetchOneByID(ctx context.Context, id uint64, fields []interface{}) (e *entity.{TplTableNameCamelCase}, err error) {
	d := &do.{TplTableNameCamelCase}{}
	err = t.isolation(ctx, d)
	if err != nil {
		return nil, err
	}

	d.Id = id

	e = &entity.{TplTableNameCamelCase}{}
	err = database.Get(t.{TplTableNameCamelCase}Dao.Ctx(ctx), e, fields, d)
	if err != nil {
		return nil, err
	}
	
	return e, nil
}

func (t *{TplTableNameCamelLowerCase}Dao) FetchListByIDs(ctx context.Context, ids []uint64, fields []interface{}) (es []entity.{TplTableNameCamelCase}, err error) {
	d := &do.{TplTableNameCamelCase}{}
	err = t.isolation(ctx, d)
	if err != nil {
		return nil, err
	}

	d.Id = ids

	es = make([]entity.{TplTableNameCamelCase}, 0)
	err = database.Get(t.{TplTableNameCamelCase}Dao.Ctx(ctx), &es, fields, d)
	if err != nil {
		return nil, err
	}
	
	return es, nil
}

func (t *{TplTableNameCamelLowerCase}Dao) FetchOne(ctx context.Context, fields []interface{}, d *do.{TplTableNameCamelCase}, conds ...database.Cond) (*entity.{TplTableNameCamelCase}, error) {
	
	err := t.isolation(ctx, d)
	if err != nil {
		return nil, err
	}

	e := &entity.{TplTableNameCamelCase}{}
	err = database.Get(t.{TplTableNameCamelCase}Dao.Ctx(ctx), e, fields, d, conds...)
	
	if err != nil {
		return nil, err
	}

	return e, nil
}

func (t *{TplTableNameCamelLowerCase}Dao) FetchList(ctx context.Context, fields []interface{}, d *do.{TplTableNameCamelCase}, conds ...database.Cond) ([]entity.{TplTableNameCamelCase}, error) {
	
	err := t.isolation(ctx, d)
	if err != nil {
		return nil, err
	}

	es := make([]entity.{TplTableNameCamelCase}, 0)
	err = database.Get(t.{TplTableNameCamelCase}Dao.Ctx(ctx), &es, fields, d, conds...)
	
	if err != nil {
		return nil, err
	}

	return es, nil
}

// Count 获取数量
func (t *{TplTableNameCamelLowerCase}Dao) Count(ctx context.Context, d *do.{TplTableNameCamelCase}, conds ...database.Cond) (int, error) {
	err := t.isolation(ctx, d)
	if err != nil {
		return 0, err
	}

	return database.Count(t.{TplTableNameCamelCase}Dao.Ctx(ctx), d, conds...)
}

// Create 数据创建
func (t *{TplTableNameCamelLowerCase}Dao) Create(ctx context.Context, d *do.{TplTableNameCamelCase}) (uint64, error) {
	err := t.isolation(ctx, d)
	if err != nil {
		return 0, err
	}

	if {TplTableNameCamelLowerCase}IDs != nil {
		maxID, err := t.GetMaxID(1)
		if err != nil {
			return 0, err
		}
		d.Id = maxID
	}

	id, err := database.Create(t.{TplTableNameCamelCase}Dao.Ctx(ctx), d)
	return uint64(id), err
}

// Update 数据更新
func (t *{TplTableNameCamelLowerCase}Dao) Update(ctx context.Context, d *do.{TplTableNameCamelCase}, wd *do.{TplTableNameCamelCase}, conds ...database.Cond) (int64, error) {
	err := t.isolation(ctx, wd)
	if err != nil {
		return 0, err
	}

	return database.Update(t.{TplTableNameCamelCase}Dao.Ctx(ctx), d, wd, conds...)
}

// Delete 数据删除
func (t *{TplTableNameCamelLowerCase}Dao) Delete(ctx context.Context, d *do.{TplTableNameCamelCase}, conds ...database.Cond) (int64, error) {
	err := t.isolation(ctx, d)
	if err != nil {
		return 0, err
	}

	return database.Delete(t.{TplTableNameCamelCase}Dao.Ctx(ctx), d, conds...)
}

// BatchCreate 批量创建
func (t *{TplTableNameCamelLowerCase}Dao) BatchCreate(ctx context.Context, data []do.{TplTableNameCamelCase}, batchNum int) error {
	dataLen := len(data)
	if dataLen == 0 {
		return nil
	}

	condVal := 0
	if data[0].OrgId == nil {
		condVal |= 1
	}

	if data[0].Id == nil {
		condVal |= 2
	}

	switch condVal {
	case 3:
		orgID, err := resource.GetOrgID(ctx)
		if err != nil {
			return err
		}

		maxID, err := t.GetMaxID(uint64(dataLen))
		if err != nil {
			return err
		}
		for i := 0; i < dataLen; i++ {
			data[i].Id = maxID - uint64(i)
			data[i].OrgId = orgID
		}
	case 2:
		maxID, err := t.GetMaxID(uint64(dataLen))
		if err != nil {
			return err
		}
		for i := 0; i < dataLen; i++ {
			data[i].Id = maxID - uint64(i)
		}
	case 1:
		orgID, err := resource.GetOrgID(ctx)
		if err != nil {
			return err
		}

		for i := 0; i < dataLen; i++ {
			data[i].OrgId = orgID
		}
	}

	if batchNum == 0 {
		batchNum = 1000
	}

	_, err := t.{TplTableNameCamelCase}Dao.Ctx(ctx).Batch(batchNum).Data(data).Insert()
	return err
}

// BatchUpdate 批量更新
func (t *{TplTableNameCamelLowerCase}Dao) BatchUpdate(ctx context.Context, ids []string, upData []string) error {
	orgID, err := resource.GetOrgID(ctx)
	if err != nil {
		return err
	}

	_, err = database.BatchUpdate(ctx, t.DB(), t.Table(), ids, upData, fmt.Sprintf("org_id = %d", orgID))
	return err
}

// FindOrCreate 查找 或者 插入
func (t *{TplTableNameCamelLowerCase}Dao) FindOrCreate(ctx context.Context, e *entity.{TplTableNameCamelCase}, fields []interface{}, wd *do.{TplTableNameCamelCase}, d *do.{TplTableNameCamelCase}) error {
	if err := t.GetOne(ctx, e, fields, wd); err != nil {
		return err
	}

	if e.Id > 0 {
		return nil
	}

	insertID, err := t.Create(ctx, d)
	if err != nil {
		return err
	}

	err = t.GetOne(ctx, e, fields, &do.{TplTableNameCamelCase}{Id: insertID})
	return err
}

// Upsert 更新 或者 插入
func (t *{TplTableNameCamelLowerCase}Dao) Upsert(ctx context.Context, uniqWd *do.{TplTableNameCamelCase}, d *do.{TplTableNameCamelCase}, conds ...database.Cond) (uint64, bool, error) {
	e := &entity.{TplTableNameCamelCase}{}
	err := t.GetOne(ctx, e, []interface{}{"id"}, uniqWd)

	if err != nil {
		return 0, false, err
	}

	if e.Id > 0 {
		// 存在更新
		_, err = t.Update(ctx, d, &do.{TplTableNameCamelCase}{Id: e.Id}, conds...)
		return uint64(e.Id), true, err
	}

	id, err := t.Create(ctx, d)
	return id, false, err
}


`

const TemplateDaoDaoInternalContent = `
// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at {TplDatetime}
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// {TplTableNameCamelCase}Dao is the data access object for table {TplTableName}.
type {TplTableNameCamelCase}Dao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns {TplTableNameCamelCase}Columns // columns contains all the column names of Table for convenient usage.
}

// {TplTableNameCamelCase}Columns defines and stores column names for table {TplTableName}.
type {TplTableNameCamelCase}Columns struct {
	{TplColumnDefine}
}

//  {TplTableNameCamelLowerCase}Columns holds the columns for table {TplTableName}.
var {TplTableNameCamelLowerCase}Columns = {TplTableNameCamelCase}Columns{
	{TplColumnNames}
}

// New{TplTableNameCamelCase}Dao creates and returns a new DAO object for table data access.
func New{TplTableNameCamelCase}Dao() *{TplTableNameCamelCase}Dao {
	return &{TplTableNameCamelCase}Dao{
		group:   "{TplGroupName}",
		table:   "{TplTableName}",
		columns: {TplTableNameCamelLowerCase}Columns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *{TplTableNameCamelCase}Dao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *{TplTableNameCamelCase}Dao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *{TplTableNameCamelCase}Dao) Columns() {TplTableNameCamelCase}Columns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *{TplTableNameCamelCase}Dao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *{TplTableNameCamelCase}Dao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *{TplTableNameCamelCase}Dao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
`
